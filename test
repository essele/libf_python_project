#!/usr/bin/python3

from bokeh.plotting import figure, show
from collections import OrderedDict
import csv
import string

#
# Helper function to convert from a KiCAD dimension (string) to
# a float value in mm
#
def kicad_num(v):
    return(float(v)/1000000.0)


#
# Helper function to return the reference type from the given reference
#
# Could have used regex, but this seemed more efficient?
#
def reftype(s):
    for i, c in enumerate(s):
        if (c.isdigit()):
            return s[:i]
    return s


class Shape():
    
    def __init__(self):
        self.minx = -1
        self.miny = -1
        self.xlist = []
        self.ylist = []

    def addPoint(self, x, y):
        if (self.minx < 0 or x < self.minx):
            self.minx = x
        if (self.miny < 0 or y < self.miny):
            self.miny = y
        self.xlist.append(x)
        self.ylist.append(y)

    def shiftByAmount(self, movex, movey):
        for index, x in enumerate(self.xlist):
            self.xlist[index] = x - movex;
        for index, y in enumerate(self.ylist):
            self.ylist[index] = y - movey;
        
    def shiftToZero(self):
        self.shiftByAmount(self.minx, self.miny)

    def draw(self, plot, **kwargs):
        p.patch(self.xlist + [self.xlist[0]], self.ylist + [self.ylist[0]], **kwargs)
        

class Component():
    def __init__(self, board, fields):
        
        # Some handy references for future drawing
        self.width = kicad_num(fields["right"]) - kicad_num(fields["left"])
        self.height = kicad_num(fields["bottom"]) - kicad_num(fields["top"])
        self.originx = kicad_num(fields["left"]) - board.minx;
        self.originy = kicad_num(fields["top"]) - board.miny

    def getName(self):
        return type(self).__name__

    def draw(self, plot):
        #p.block(x=[self.originx], y=[self.originy], width=[self.width], height=[self.height], line_color="#dddddd", fill_alpha=0.0, line_dash="dotted")
        p.block(x=[self.originx], y=[self.originy], width=[self.width], height=[self.height], 
            line_color="#dddddd", fill_alpha=0.0, line_alpha=0.5, line_dash="dotted")


class Unknown(Component):
    def draw(self, plot):
        super().draw(plot)

        p.block(x=[self.originx + (self.width*0.02)], y=[self.originy + (self.height*0.02)],
                    width=[self.width * 0.96], height=[self.height * 0.96],
                    hatch_color="green", hatch_pattern="diagonal_cross", hatch_weight=1, fill_alpha=0.0, line_alpha=0.0, hatch_scale=8)

class Resistor(Component):
    def draw(self, plot):
        super().draw(plot)

        p.block(x=[self.originx + (self.width*0.3)], y=[self.originy + (self.height*0.2)],
            width=[self.width*0.4], height=[self.height*0.6], color="yellow", line_width=1, fill_alpha=0.0);
        p.line([self.originx + (self.width*0.1), self.originx + (self.width*0.3)],
                [self.originy + (self.height*0.5), self.originy + (self.height*0.5)], color="yellow", line_width=1)
        p.line([self.originx + (self.width*0.7), self.originx + (self.width*0.9)],
                [self.originy + (self.height*0.5), self.originy + (self.height*0.5)], color="yellow", line_width=1)

class Capacitor(Component):
    def draw(self, plot):
        super().draw(plot)

        p.line([self.originx + (self.width*0.1), self.originx + (self.width*0.4)],
                [self.originy + (self.height*0.5), self.originy + (self.height*0.5)], color="yellow", line_width=1)

        p.line([self.originx + (self.width*0.4), self.originx + (self.width*0.4)],
                [self.originy + (self.height*0.2), self.originy + (self.height*0.8)], color="yellow", line_width=1)
        p.line([self.originx + (self.width*0.6), self.originx + (self.width*0.6)],
                [self.originy + (self.height*0.2), self.originy + (self.height*0.8)], color="yellow", line_width=1)

        p.line([self.originx + (self.width*0.6), self.originx + (self.width*0.9)],
                [self.originy + (self.height*0.5), self.originy + (self.height*0.5)], color="yellow", line_width=1)

class Transistor(Component):
    def draw(self, plot):
        super().draw(plot)

        dia = min(self.width*0.9, self.height*0.9)
        p.ellipse(x=[self.originx+(self.width*0.5)], y=[self.originy+(self.height*0.5)],
                width=dia, height=dia, color="yellow", line_width=1)

class IC(Component):
    def draw(self, plot):
        super().draw(plot)

        p.block(x=[self.originx + (self.width*0.3)], y=[self.originy + (self.height*0.2)],
            width=[self.width*0.4], height=[self.height*0.6], color="yellow", line_width=1, fill_alpha=0.0);

        for i in [ 0.3, 0.4, 0.5, 0.6, 0.7 ]:
            p.line([self.originx + (self.width*0.1), self.originx + (self.width*0.3)],
                    [self.originy + (self.height*i), self.originy + (self.height*i)], color="yellow", line_width=1)
            p.line([self.originx + (self.width*0.7), self.originx + (self.width*0.9)],
                    [self.originy + (self.height*i), self.originy + (self.height*i)], color="yellow", line_width=1)

class Diode(Component):
    def draw(self, plot):
        super().draw(plot)

        p.line([self.originx + (self.width*0.3), self.originx + (self.width*0.3)],
                [self.originy + (self.height*0.3), self.originy + (self.height*0.7)], color="yellow", line_width=1)
        p.line([self.originx + (self.width*0.3), self.originx + (self.width*0.7)],
                [self.originy + (self.height*0.3), self.originy + (self.height*0.5)], color="yellow", line_width=1)
        p.line([self.originx + (self.width*0.3), self.originx + (self.width*0.7)],
                [self.originy + (self.height*0.7), self.originy + (self.height*0.5)], color="yellow", line_width=1)
        p.line([self.originx + (self.width*0.7), self.originx + (self.width*0.7)],
                [self.originy + (self.height*0.3), self.originy + (self.height*0.7)], color="yellow", line_width=1)

        p.line([self.originx + (self.width*0.1), self.originx + (self.width*0.3)],
                [self.originy + (self.height*0.5), self.originy + (self.height*0.5)], color="yellow", line_width=1)
        p.line([self.originx + (self.width*0.7), self.originx + (self.width*0.9)],
                [self.originy + (self.height*0.5), self.originy + (self.height*0.5)], color="yellow", line_width=1)




mapping = { "FB": Unknown, "R": Resistor, "C": Capacitor, "Q": Transistor, "U": IC, "D": Diode }



#
# MAIN FROM HERE
#

board = Shape()
with open("/home/essele/kicad/sample/board.csv") as bfile:
    reader = csv.DictReader(bfile)
    for row in reader:
        print("XX: " + row["x"] + " -- " + row["y"])
        board.addPoint(kicad_num(row["x"]), kicad_num(row["y"]))

    board.shiftToZero()

#
# Draw the board outline...
#

# create a new plot with a title and axis labels
p = figure(title="PCB layout", x_axis_label="x (mm)", y_axis_label="y (mm)", match_aspect=True)
board.draw(p, line_width=2, fill_color="#002d04", line_color="black")
#p.line(board.xlist, board.ylist, legend_label="Board Outline", line_width=2)

#
# Now run through the components...
#
with open("/home/essele/kicad/sample/components.csv") as cfile:
    reader = csv.DictReader(cfile)
    for row in reader:
        rt = reftype(row["ref"]);

        map = mapping.get(rt, Unknown)
        print("Map is")
        print(map)
        if (map):
            c = map(board, row)
        else:
            c = Unknown(board, row)


#        if (row["ref"][0] == "R"):
#            c = Resistor(board, row)
#        elif (row["ref"][0] == "C"):
#            c = Capacitor(board, row)
#        elif (row["ref"][0] == "Q"):
#            c = Unknown(board, row)
#        else:
#            c = Component(board, row)

#        c.draw(p, line_width=1, color="grey")
        c.draw(p)
        print(row["ref"])



# show the results
show(p)
